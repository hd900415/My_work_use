pipeline {
    agent any
    parameters {
        gitParameter(
            name: 'BRANCH',
            type: 'PT_BRANCH',
            defaultValue: 'origin/master',
            description: 'Select the branch to build',
            useRepository: 'https://gitlab.ai9.me/zonghepan/web-api.git',
            branchFilter: 'origin/(.*)'
            Lark_webhook: ""
        )
    }
    environment {
        GIT_URL = 'https://gitlab.ai9.me/zonghepan/web-api.git'
        MVN_HOME = '/usr/local/apache-maven-3.3.9'
        JAR_DIR = '/var/jenkins_home/jarfile/ZHP_Prod_File'
        APP_NAME = 'web-api'
        HOST_IP = '43.255.105.1'
        SSH_KEY = '/var/jenkins_home/sshfile/devops-dev.pem'
        NACOS_SERVER = '127.0.0.1'
        ACTIVE_PROFILE = 'sit'
        NAMESPACE = '2e03f35f-13ff-45a6-a35f-204e8b52222c'
        REMOTE_DIR = '/data'
        STARTUP_SCRIPT = 'startup.sh'
    }
    stages {
        stage('清理工作目录') {
            steps {
                echo '清理 Jenkins 工作目录...'
                deleteDir()
            }
        }

        stage('拉取代码') {
            steps {
                echo "拉取代码分支: ${params.BRANCH}"
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${params.BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: '692d7b05-6dee-43c3-88fc-46ee35a87909',
                        url: "${env.GIT_URL}"
                    ]]
                ])
            }
        }

        stage('编译打包') {
            steps {
                script {
                    echo "编译并打包应用: ${env.APP_NAME}"
                    sh "${env.MVN_HOME}/bin/mvn clean install -Dmaven.test.skip=true -U"
                }
            }
        }

        stage('保存构建包') {
            steps {
                script {
                    def jarPath = "target/${env.APP_NAME}.jar"
                    def destDir = "${env.JAR_DIR}/${env.APP_NAME}"
                    echo "保存 ${env.APP_NAME} 构建包到 ${destDir}"
                    if (fileExists(jarPath)) {
                        sh "mkdir -p ${destDir}"
                        sh "cp ${jarPath} ${destDir}/"
                        echo "构建包保存成功: ${destDir}/${env.APP_NAME}.jar"
                    } else {
                        error "未找到 JAR 文件: ${jarPath}"
                    }
                }
            }
        }

        stage('部署到服务器') {
            steps {
                script {
                    def jarPath = "${env.JAR_DIR}/${env.APP_NAME}/${env.APP_NAME}.jar"
                    if (!fileExists(jarPath)) {
                        error "JAR 文件未找到: ${jarPath}. 请检查是否成功打包！"
                    }

                    def startupScriptContent = """
#!/bin/bash
APP_NAME="${env.APP_NAME}"
JAR_PATH="${env.REMOTE_DIR}/${env.APP_NAME}/${env.APP_NAME}.jar"
NACOS_SERVER="${env.NACOS_SERVER}"
ACTIVE_PROFILE="${env.ACTIVE_PROFILE}"

echo "检查是否有正在运行的进程..."
pid=\$(ps -ef | grep "[j]ava.*\${APP_NAME}" | awk '{print \$2}')
if [ -n "\$pid" ]; then
    echo "停止正在运行的进程，PID: \$pid"
    kill -9 \$pid
    echo "进程已停止"
else
    echo "未发现运行中的进程"
fi

echo "启动新的进程..."
mkdir -p ${env.REMOTE_DIR}/\${APP_NAME}
nohup java -jar -Dspring.profiles.active=\${ACTIVE_PROFILE} \${JAR_PATH} > ${env.REMOTE_DIR}/\${APP_NAME}/nohup.out 2>&1 &

sleep 10
pid=\$(ps -ef | grep "[j]ava.*\${APP_NAME}" | awk '{print \$2}')
if [ -n "\$pid" ]; then
    echo "进程启动成功，PID: \$pid"
else
    echo "进程启动失败，请检查日志文件：${env.REMOTE_DIR}/\${APP_NAME}/nohup.out"
    exit 1
fi
"""
                    writeFile file: env.STARTUP_SCRIPT, text: startupScriptContent

                    echo "上传 JAR 包和启动脚本到服务器..."
                    sh """
                    ssh -i ${env.SSH_KEY} -o StrictHostKeyChecking=no root@${env.HOST_IP} "mkdir -p ${env.REMOTE_DIR}/${env.APP_NAME}"
                    scp -i ${env.SSH_KEY} -o StrictHostKeyChecking=no ${jarPath} root@${env.HOST_IP}:${env.REMOTE_DIR}/${env.APP_NAME}/
                    scp -i ${env.SSH_KEY} -o StrictHostKeyChecking=no ${env.STARTUP_SCRIPT} root@${env.HOST_IP}:${env.REMOTE_DIR}/${env.APP_NAME}/
                    ssh -i ${env.SSH_KEY} -o StrictHostKeyChecking=no root@${env.HOST_IP} "chmod +x ${env.REMOTE_DIR}/${env.APP_NAME}/startup.sh"
                    ssh -i ${env.SSH_KEY} -o StrictHostKeyChecking=no root@${env.HOST_IP} "${env.REMOTE_DIR}/${env.APP_NAME}/startup.sh"
                    """
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline 执行成功！应用已部署。'
        }
        failure {
            echo 'Pipeline 执行失败，请检查日志！'
        }
    }
}
