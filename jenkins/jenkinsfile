pipeline {
    agent any
    environment {
        GIT_URL = 'https://gitlab.ai9.me/mt5/mt5-java.git'
        MVN_HOME = '/usr/local/apache-maven-3.3.9'
        JAR_DIR = '/var/jenkins_home/jarfile/devJarFile/'
        APP_NAME = 'MT5-AdminServer'
        //HOST_IP = '43.255.105.1'
        SSH_KEY = '/var/jenkins_home/sshfile/devops-dev.pem'
        //nacosServer = '127.0.0.1'
        //activeProfile = 'sit'
        //nameSpace = '2e03f35f-13ff-45a6-a35f-204e8b52222c'
        REMOTE_DIR = '/data' // ËøúÁ®ãÁõÆÂΩïË∑ØÂæÑ
        STARTUP_SCRIPT = 'startup.sh'
    }
    stages {
        stage('ÂºÄÂßãÂâçÊ∏ÖÁêÜÂ∑•‰ΩúÁõÆÂΩï') {
            steps {
                echo 'Ê∏ÖÁêÜÂ∑•‰ΩúÁõÆÂΩï...'
                deleteDir()
            }
        }
        stage('ÈÄâÊã©ÂàÜÊîØÂíåÁéØÂ¢É') {
            steps {
                script {
                    //ÂÆö‰πâÁéØÂ¢ÉÂíåIPÊò†Â∞Ñ
                    def environments = [
                        'BESTONFX': '114.119.181.154',
                        'Fpmarkets': '124.243.187.28',
                        'MAXAIN': '49.0.205.66',
                        'MultibankGroup': '190.92.216.77',
                        'TDXGLOBAL': '159.138.85.226',
                        'WINGO': '190.92.201.153',
                        'CentFX': '119.13.108.117',
                        'forex.com': '190.92.211.197',
                        'MT5-AdminServer': '127.0.0.1'
                    ]
                    withCredentials([usernamePassword(credentialsId: '692d7b05-6dee-43c3-88fc-46ee35a87909', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        // Ëé∑ÂèñÂàÜÊîØÂàóË°®
                        def branches = sh(
                            script: """
                                git ls-remote --heads https://${USERNAME}:${PASSWORD}@gitlab.ai9.me/mt5/mt5-java.git | awk '{print \$2}' | sed 's|refs/heads/||'
                            """,
                            returnStdout: true
                        ).trim().split("\n")

                        if (branches.size() == 0) {
                            error "Êú™ËÉΩËé∑ÂèñÂàÜÊîØÂàóË°®ÔºåËØ∑Ê£ÄÊü•‰ªìÂ∫ìÂú∞ÂùÄÂíåÊùÉÈôêÔºÅ"
                        }
                        // ÈÄâÊã©ÂàÜÊîØ
                        def inputChoice = input(
                            message: 'ËØ∑ÈÄâÊã©ÈÉ®ÁΩ≤ÂàÜÊîØÂíåÁéØÂ¢É',
                            parameters: [
                                choice(name: 'BRANCH', choices: branches.join('\n'), description: 'ËØ∑ÈÄâÊã©Ë¶ÅÈÉ®ÁΩ≤ÁöÑÂàÜÊîØ'), 
                                choice(name: 'ENVIRONMENT', choices: environments.keySet().join('\n'), description: 'ËØ∑ÈÄâÊã©Ë¶ÅÈÉ®ÁΩ≤ÁöÑÁéØÂ¢É')
                            ]
                        )
                        // ËÆæÁΩÆÈÄâÊã©ÁöÑÂàÜÊîØÂíåÁéØÂ¢ÉÂèòÈáè
                        env.SELECTED_BRANCH = inputChoice['BRANCH']
                        env.SELECTED_ENV = inputChoice['ENVIRONMENT']
                        env.HOST_IP = environments[env.SELECTED_ENV]
                        
                        echo "ÈÄâÊã©ÁöÑÂàÜÊîØ: ${env.SELECTED_BRANCH}"
                        echo "ÈÄâÊã©ÁöÑÁéØÂ¢É: ${env.SELECTED_ENV}"
                        echo "ÈÉ®ÁΩ≤ÁöÑIPÂú∞ÂùÄ: ${env.HOST_IP}"
                    }
                }
            }
        }
        stage('ÊãâÂèñ‰ª£Á†Å') {
            steps {
                echo "ÈÄâÊã©ÁöÑÂàÜÊîØÊòØ: ${env.SELECTED_BRANCH}"
                checkout scmGit(
                    branches: [[name: "${env.SELECTED_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: '692d7b05-6dee-43c3-88fc-46ee35a87909',
                        url: "${GIT_URL}"
                    ]]
                )
            }
        }
        stage('ÁºñËØëÊâìÂåÖ') {
            steps {
                script {
                    echo "ÊûÑÂª∫Â∫îÁî®: ${env.APP_NAME}"
                    sh "${MVN_HOME}/bin/mvn clean install -Dmaven.test.skip=true -U"
                }
            }
        }
        stage('ÊèêÂèñÊûÑÂª∫ÂåÖ') {
            steps {
                script {
                    def jarPath = "MT5-AdminServer/target/${env.APP_NAME}.jar"
                    def destDir = "${env.JAR_DIR}/${env.APP_NAME}"
                    echo "‰øùÂ≠ò ${env.APP_NAME} ÁöÑÊûÑÂª∫ÂåÖ..."
                    if (fileExists(jarPath)) {
                        sh "mkdir -p ${destDir}"
                        sh "cp ${jarPath} ${destDir}/"
                        echo "ÊûÑÂª∫ÂåÖÂ∑≤‰øùÂ≠òÂà∞: ${destDir}/"
                    } else {
                        error "Êú™ÊâæÂà∞ JAR Êñá‰ª∂: ${jarPath}"
                    }
                }
            }
        }
        stage('Ê£ÄÊü•ÊûÑÂª∫ÂåÖ') {
            steps {
                script {
                    def jarPath = "${env.JAR_DIR}/${env.APP_NAME}/${env.APP_NAME}.jar"
                    echo "Jar Path: ${jarPath}"
                    if (!fileExists(jarPath)) {
                        error "JAR Êñá‰ª∂Êú™ÊâæÂà∞: ${jarPath}. ËØ∑Á°ÆËÆ§ÊûÑÂª∫ÊòØÂê¶Â∑≤ÂÆåÊàêÔºÅ"
                    }
                    env.JAR_PATH = jarPath
                }
            }
        }
        stage('ÈÉ®ÁΩ≤Â∫îÁî®Âà∞ÊúçÂä°Âô®') {
            steps {
                script {
                    def jarPath = "${env.JAR_DIR}/${env.APP_NAME}/${env.APP_NAME}.jar"
                    def startupScript = """
#!/bin/bash
APP_NAME="${env.APP_NAME}"
JAR_PATH="${env.REMOTE_DIR}/${env.APP_NAME}/${env.APP_NAME}.jar"
NACOS_SERVER="${env.nacosServer}"
ACTIVE_PROFILE="${env.activeProfile}"
NAMESPACE="${env.nameSpace}"

echo "Ê£ÄÊü•ÊòØÂê¶ÊúâÊ≠£Âú®ËøêË°åÁöÑËøõÁ®ã..."
pid=\$(ps -ef | grep "[j]ava.*\${APP_NAME}" | awk '{print \$2}')
if [ -n "\$pid" ]; then
    echo "ÂèëÁé∞Ê≠£Âú®ËøêË°åÁöÑËøõÁ®ãÔºåPID: \$pidÔºåÂáÜÂ§áÂÅúÊ≠¢..."
    kill -9 \$pid
    echo "ËøõÁ®ãÂ∑≤ÂÅúÊ≠¢„ÄÇ"
else
    echo "Êú™ÂèëÁé∞ËøêË°å‰∏≠ÁöÑËøõÁ®ã„ÄÇ"
fi

echo "ÂêØÂä®Êñ∞ÁöÑËøõÁ®ã..."
mkdir -p ${env.REMOTE_DIR}/\${APP_NAME}
nohup java -jar -Duser.timezone=America/New_York \${JAR_PATH} --spring.config.name=application --spring.config.location=${env.REMOTE_DIR}/${env.APP_NAME}/config/  > ${env.REMOTE_DIR}/\${APP_NAME}/nohup.out 2>&1 &

sleep 15
pid=\$(ps -ef | grep "[j]ava.*\${APP_NAME}" | awk '{print \$2}')
if [ -n "\$pid" ]; then
    echo "ËøõÁ®ãÂêØÂä®ÊàêÂäüÔºåPID: \$pid"
else
    echo "ËøõÁ®ãÂêØÂä®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êó•ÂøóÊñá‰ª∂Ôºö${env.REMOTE_DIR}/\${APP_NAME}/nohup.out"
    exit 1
fi
"""
                    writeFile file: env.STARTUP_SCRIPT, text: startupScript
                    sh """
                    ssh -i ${env.SSH_KEY} -o StrictHostKeyChecking=no root@${env.HOST_IP} "mkdir -p ${env.REMOTE_DIR}/${env.APP_NAME}"
                    scp -i ${env.SSH_KEY} -o StrictHostKeyChecking=no ${jarPath} root@${env.HOST_IP}:${env.REMOTE_DIR}/${env.APP_NAME}/
                    scp -i ${env.SSH_KEY} -o StrictHostKeyChecking=no ${env.STARTUP_SCRIPT} root@${env.HOST_IP}:${env.REMOTE_DIR}/${env.APP_NAME}/startup.sh
                    ssh -i ${env.SSH_KEY} -o StrictHostKeyChecking=no root@${env.HOST_IP} "chmod +x ${env.REMOTE_DIR}/${env.APP_NAME}/startup.sh"
                    ssh -i ${env.SSH_KEY} -o StrictHostKeyChecking=no root@${env.HOST_IP} "${env.REMOTE_DIR}/${env.APP_NAME}/startup.sh"
                    """
                }
            }
        }
    }
    post {
        success {
            script {
                def duration = currentBuild.duration
                def successMsg = """
                {
                    "msg_type": "post",
                    "content": {
                        "post": {
                            "zh_cn": {
                                "title": "JenkinsÈÉ®ÁΩ≤ÈÄöÁü•",
                                "content": [
                                    [
                                        {
                                            "tag": "text",
                                            "text": "üìã ‰ªªÂä°ÂêçÁß∞Ôºö"
                                        },
                                        {
                                            "tag": "a",
                                            "text": "${JOB_NAME}",
                                            "href": "${JOB_URL}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüî¢ ÊûÑÂª∫ÁºñÂè∑Ôºö"
                                        },
                                        {
                                            "tag": "a",
                                            "text": "${BUILD_DISPLAY_NAME}",
                                            "href": "${BUILD_URL}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüåü ÊûÑÂª∫Áä∂ÊÄÅÔºöÊàêÂäü"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüöÄ ÈÉ®ÁΩ≤ÂàÜÊîØÔºö${env.SELECTED_BRANCH}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüéØ ÈÉ®ÁΩ≤ÁéØÂ¢ÉÔºö${env.SELECTED_ENV}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüñ•Ô∏è ÈÉ®ÁΩ≤IPÔºö${env.HOST_IP}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüïê ÊûÑÂª∫Áî®Êó∂Ôºö${duration} ms"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "at",
                                            "user_id": "all"
                                        }
                                    ]
                                ]
                            }
                        }
                    }
                }"""
                
                sh """
                    curl -X POST -H 'Content-Type: application/json' \
                    -d '${successMsg}' \
                    'https://open.larksuite.com/open-apis/bot/v2/hook/1f8eee66-d855-4b81-ba6e-c375a583fcb4'
                """
            }
        }
        failure {
            script {
                def duration = currentBuild.duration
                def failureMsg = """
                {
                    "msg_type": "post",
                    "content": {
                        "post": {
                            "zh_cn": {
                                "title": "JenkinsÈÉ®ÁΩ≤ÈÄöÁü•",
                                "content": [
                                    [
                                        {
                                            "tag": "text",
                                            "text": "üìã ‰ªªÂä°ÂêçÁß∞Ôºö"
                                        },
                                        {
                                            "tag": "a",
                                            "text": "${JOB_NAME}",
                                            "href": "${JOB_URL}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüî¢ ÊûÑÂª∫ÁºñÂè∑Ôºö"
                                        },
                                        {
                                            "tag": "a",
                                            "text": "${BUILD_DISPLAY_NAME}",
                                            "href": "${BUILD_URL}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\n‚ùå ÊûÑÂª∫Áä∂ÊÄÅÔºöÂ§±Ë¥•"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüöÄ ÈÉ®ÁΩ≤ÂàÜÊîØÔºö${env.SELECTED_BRANCH}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüéØ ÈÉ®ÁΩ≤ÁéØÂ¢ÉÔºö${env.SELECTED_ENV}"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "text",
                                            "text": "\\nüïê ÊûÑÂª∫Áî®Êó∂Ôºö${duration} ms"
                                        }
                                    ],
                                    [
                                        {
                                            "tag": "at",
                                            "user_id": "all"
                                        }
                                    ]
                                ]
                            }
                        }
                    }
                }"""
                
                sh """
                    curl -X POST -H 'Content-Type: application/json' \
                    -d '${failureMsg}' \
                    'https://open.larksuite.com/open-apis/bot/v2/hook/1f8eee66-d855-4b81-ba6e-c375a583fcb4'
                """
            }
        }
    }
}
