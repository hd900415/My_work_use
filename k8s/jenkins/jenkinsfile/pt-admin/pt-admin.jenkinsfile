pipeline {
    agent any

    environment {
        MVN_HOME = '/usr/local/apache-maven-3.9.9'
        GIT_REPO = 'gitlab.ai9.me/business/pt-admin.git'
        DOCKER_REGISTRY = 'harbor.pttech.cc/dev'
        CREDENTIALS_ID = '86f083fe-8a8e-4b12-a445-985e77d2733e'
        DOCKER_CREDENTIALS_ID = '194c44bc-fb25-4ffb-82bc-9357aeb2e809'
        KUBERNETES_FILE_ID = 'ba18c432-38d8-480d-b7dc-5cd0f31aabde'
        LARK_WEBHOOK = "https://open.larksuite.com/open-apis/bot/v2/hook/1f105b8d-8cb7-4215-bf7f-2afcb9754579"
    }

    stages {
        stage('构建前清理工作目录') {
            steps {
                cleanWs()
            }
        }
        stage('拉取所有分支') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        env.GIT_USERNAME = GIT_USERNAME
                        env.GIT_PASSWORD = GIT_PASSWORD
                        sh "git ls-remote --heads https://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_REPO}"
                    }
                }
            }
        }
        stage('选择分支和模块') {
            steps {
                script {
                    def branches = sh(script: "git ls-remote --heads https://${env.GIT_USERNAME}:${env.GIT_PASSWORD}@${GIT_REPO} | awk '{print \$2}' | sed 's|refs/heads/||'", returnStdout: true).trim().split("\n")
                    def branchChoices = branches.join("\n")
                    def userInput = input(
                        id: 'userInput', message: '请选择要构建的分支和模块', parameters: [
                            [$class: 'ChoiceParameterDefinition', choices: branchChoices, description: '分支名称', name: 'BRANCH'],
                            [$class: 'ChoiceParameterDefinition', choices: 'all\npt-admin-modules-activity\npt-admin-modules-bet\npt-admin-modules-file\npt-admin-modules-finance\npt-admin-modules-game\npt-admin-modules-gen\npt-admin-modules-job\npt-admin-modules-member\npt-admin-modules-report\npt-admin-modules-system\npt-admin-modules-auth', description: '模块名称', name: 'APP_NAME']
                        ]
                    )
                    env.SELECTED_BRANCH = userInput.BRANCH
                    env.APP_NAME = userInput.APP_NAME
                }
            }
        }
        stage('拉取代码') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${env.SELECTED_BRANCH}"]],
                        userRemoteConfigs: [[
                            credentialsId: "${CREDENTIALS_ID}",
                            url: "https://${GIT_REPO}"
                        ]]
                    ])
                }
            }
        }
        stage('初始化') {
            steps {
                script {
                    env.BUILD_VERSION = "1.0-${new Date().format('yyyyMMddHHmm')}.${sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()}"
                    echo "动态版本号已生成: ${env.BUILD_VERSION}"
                }
            }
        }
        stage('构建 Jar 文件') {
            steps {
                script {
                    if (env.APP_NAME == 'all') {
                        echo "开始构建所有模块"
                        sh "${MVN_HOME}/bin/mvn clean install -pl pt-admin-modules -amd -Dmaven.test.skip=true -U"
                    } else {
                        echo "开始构建模块: ${env.APP_NAME}"
                        sh "${MVN_HOME}/bin/mvn clean install -pl pt-admin-modules/${env.APP_NAME} -amd -Dmaven.test.skip=true -U"
                    }
                }
            }
        }
        stage('构建 Docker 镜像') {
            steps {
                script {
                    def modules = (env.APP_NAME == 'all') ? [
                        'pt-admin-modules-activity', 
                        'pt-admin-modules-bet', 
                        'pt-admin-modules-file', 
                        'pt-admin-modules-finance', 
                        'pt-admin-modules-game', 
                        'pt-admin-modules-gen', 
                        'pt-admin-modules-job', 
                        'pt-admin-modules-member', 
                        'pt-admin-modules-report', 
                        'pt-admin-modules-system',
                        'pt-admin-modules-auth'
                    ] : [env.APP_NAME]

                    modules.each { module ->
                        def imageName = "${DOCKER_REGISTRY}/${module}:${env.BUILD_VERSION}"
                        echo "正在构建 Docker 镜像: ${imageName}"
                        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh """
                            docker build -t ${imageName} ${WORKSPACE}/pt-admin-modules/${module}
                            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}
                            docker push ${imageName}
                            """
                        }
                    }
                }
            }
        }
        stage('部署到 Kubernetes') {
            steps {
                script {
                    def modules = (env.APP_NAME == 'all') ? [
                        'pt-admin-modules-activity', 
                        'pt-admin-modules-bet', 
                        'pt-admin-modules-file', 
                        'pt-admin-modules-finance', 
                        'pt-admin-modules-game', 
                        'pt-admin-modules-gen', 
                        'pt-admin-modules-job', 
                        'pt-admin-modules-member', 
                        'pt-admin-modules-report', 
                        'pt-admin-modules-system',
                        'pt-admin-modules-auth'
                    ] : [env.APP_NAME]

                    modules.each { module ->
                        echo "部署模块到 Kubernetes: ${module}"
                        def yamlFile = "${WORKSPACE}/pt-admin-modules/${module}/deploy-${module}-dev.yaml"
                        sh """
                        sed -i 's|image:.*\$|image: ${DOCKER_REGISTRY}/${module}:${env.BUILD_VERSION}|' ${yamlFile}
                        """
                        withCredentials([file(credentialsId: "${KUBERNETES_FILE_ID}", variable: 'KUBECONFIG')]) {
                            sh """
                            export KUBECONFIG=${KUBECONFIG}
                            kubectl apply -f ${yamlFile}
                            unset KUBECONFIG
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def buildStatus = currentBuild.currentResult ?: 'SUCCESS'
                def modules = (env.APP_NAME == 'all') ? [
                    'pt-admin-modules-activity', 
                    'pt-admin-modules-bet', 
                    'pt-admin-modules-file', 
                    'pt-admin-modules-finance', 
                    'pt-admin-modules-game', 
                    'pt-admin-modules-gen', 
                    'pt-admin-modules-job', 
                    'pt-admin-modules-member', 
                    'pt-admin-modules-report', 
                    'pt-admin-modules-system',
                    'pt-admin-modules-auth'
                ] : [env.APP_NAME]

                def images = modules.collect { module ->
                    "${DOCKER_REGISTRY}/${module}:${env.BUILD_VERSION}"
                }

                def buildMessage = """
                {
                    "msg_type": "interactive",
                    "card": {
                        "config": {
                            "wide_screen_mode": true
                        },
                        "header": {
                            "title": {
                                "tag": "plain_text",
                                "content": "Jenkins Build Notification"
                            },
                            "template": "${buildStatus == 'SUCCESS' ? 'green' : 'red'}"
                        },
                        "elements": [
                            {
                                "tag": "div",
                                "text": {
                                    "tag": "plain_text",
                                    "content": "Project: ${env.JOB_NAME}\\nBuild NO: #${env.BUILD_NUMBER}\\nStatus: ${buildStatus}\\nDetails: ${env.BUILD_URL}"
                                }
                            },
                            {
                                "tag": "div",
                                "text": {
                                    "tag": "plain_text",
                                    "content": "Image Name:\\n${images.join('\\n')}"
                                }
                            },
                            {
                                "tag": "div",
                                "text": {
                                    "tag": "plain_text",
                                    "content": "Version:\\n${env.BUILD_VERSION}"
                                }
                            }
                        ]
                    }
                }
                """

                httpRequest(
                    httpMode: 'POST',
                    acceptType: 'APPLICATION_JSON',
                    contentType: 'APPLICATION_JSON',
                    url: env.LARK_WEBHOOK,
                    requestBody: buildMessage
                )
            }
        }
    }
}
